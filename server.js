// server.js
const express = require('express');
const cors = require('cors');
const ZadarmaAPI = require('./zadarma-api');

const app = express();
const PORT = process.env.PORT || 3000;

// –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const API_KEY = process.env.API_KEY;
const API_SECRET = process.env.API_SECRET;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
if (!API_KEY || !API_SECRET) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: API_KEY –∏ API_SECRET –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    console.error('   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤ Railway Variables:');
    console.error('   - API_KEY = –≤–∞—à User Key –æ—Ç Zadarma');
    console.error('   - API_SECRET = –≤–∞—à Secret Key –æ—Ç Zadarma');
    process.exit(1);
}

console.log('üîë API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:');
console.log('   API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!API_KEY, `(${API_KEY ? API_KEY.length : 0} —Å–∏–º–≤–æ–ª–æ–≤)`);
console.log('   API_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!API_SECRET, `(${API_SECRET ? API_SECRET.length : 0} —Å–∏–º–≤–æ–ª–æ–≤)`);

const zadarma = new ZadarmaAPI(API_KEY, API_SECRET, false);

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
    next();
});

// ===== –ú–ê–†–®–†–£–¢–´ API =====

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.json({
        status: 'success',
        message: 'Zadarma Microservice –∑–∞–ø—É—â–µ–Ω!',
        version: '2.0.0',
        api_keys_configured: {
            api_key: !!API_KEY,
            api_secret: !!API_SECRET
        },
        endpoints: {
            balance: 'GET /api/balance',
            callback: 'POST /api/callback',
            numbers: 'GET /api/numbers',
            sms: 'POST /api/sms',
            tariffs: 'GET /api/tariffs',
            health: 'GET /health'
        }
    });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
app.get('/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        api_key_set: !!API_KEY,
        api_secret_set: !!API_SECRET,
        api_key_length: API_KEY ? API_KEY.length : 0,
        api_secret_length: API_SECRET ? API_SECRET.length : 0
    });
});

// –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å
app.get('/api/balance', async (req, res) => {
    try {
        console.log('üìä –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞...');
        const result = await zadarma.getBalance();
        
        if (result.data.status === 'success') {
            res.json({
                status: 'success',
                data: result.data,
                timestamp: new Date().toISOString()
            });
        } else {
            res.status(400).json({
                status: 'error',
                message: result.data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API',
                data: result.data,
                timestamp: new Date().toISOString()
            });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error.message);
        res.status(500).json({
            status: 'error',
            message: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫
app.post('/api/callback', async (req, res) => {
    try {
        const { phone_number, contact_name, from_number } = req.body;
        
        if (!phone_number) {
            return res.status(400).json({
                status: 'error',
                message: '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (phone_number)'
            });
        }

        console.log(`üìû –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –Ω–∞ ${phone_number}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        const fromNumber = from_number || 'auto';
        
        const result = await zadarma.requestCallback(fromNumber, phone_number, false);
        
        if (result.data.status === 'success') {
            res.json({
                status: 'success',
                message: `–û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –Ω–∞ –Ω–æ–º–µ—Ä ${phone_number}`,
                contact_name: contact_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω',
                data: result.data,
                timestamp: new Date().toISOString()
            });
        } else {
            res.status(400).json({
                status: 'error',
                message: result.data.message || '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞',
                data: result.data,
                timestamp: new Date().toISOString()
            });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞:', error.message);
        res.status(500).json({
            status: 'error',
            message: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤
app.get('/api/numbers', async (req, res) => {
    try {
        console.log('üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤...');
        const result = await zadarma.getNumbers();
        
        if (result.data.status === 'success') {
            res.json({
                status: 'success',
                data: result.data,
                timestamp: new Date().toISOString()
            });
        } else {
            res.status(400).json({
                status: 'error',
                message: result.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤',
                data: result.data,
                timestamp: new Date().toISOString()
            });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤:', error.message);
        res.status(500).json({
            status: 'error',
            message: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS
app.post('/api/sms', async (req, res) => {
    try {
        const { number, message, caller_id } = req.body;
        
        if (!number || !message) {
            return res.status(400).json({
                status: 'error',
                message: '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'
            });
        }

        console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ ${number}`);
        const result = await zadarma.sendSMS(number, message, caller_id);
        
        if (result.data.status === 'success') {
            res.json({
                status: 'success',
                message: `SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –Ω–æ–º–µ—Ä ${number}`,
                data: result.data,
                timestamp: new Date().toISOString()
            });
        } else {
            res.status(400).json({
                status: 'error',
                message: result.data.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS',
                data: result.data,
                timestamp: new Date().toISOString()
            });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error.message);
        res.status(500).json({
            status: 'error',
            message: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã
app.get('/api/tariffs', async (req, res) => {
    try {
        console.log('üí∞ –ó–∞–ø—Ä–æ—Å —Ç–∞—Ä–∏—Ñ–æ–≤...');
        const result = await zadarma.getTariffs();
        
        if (result.data.status === 'success') {
            res.json({
                status: 'success',
                data: result.data,
                timestamp: new Date().toISOString()
            });
        } else {
            res.status(400).json({
                status: 'error',
                message: result.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤',
                data: result.data,
                timestamp: new Date().toISOString()
            });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤:', error.message);
        res.status(500).json({
            status: 'error',
            message: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use('*', (req, res) => {
    res.status(404).json({
        status: 'error',
        message: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        available_endpoints: [
            'GET /',
            'GET /health',
            'GET /api/balance',
            'POST /api/callback',
            'GET /api/numbers',
            'POST /api/sms',
            'GET /api/tariffs'
        ]
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
    console.log('üöÄ Zadarma Microservice –∑–∞–ø—É—â–µ–Ω!');
    console.log(`üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: http://0.0.0.0:${PORT}`);
    console.log(`üìä API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:${PORT}`);
    console.log('üìû –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤...\n');
});

// Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–æ–≤ –æ—Ç Zadarma
app.post('/webhook/call-status', async (req, res) => {
    try {
        console.log('üìû –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Zadarma:', req.body);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ n8n –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const n8nWebhookUrl = 'https://–≤–∞—à-n8n-–¥–æ–º–µ–Ω.com/webhook/webhook-callback-response';
        
        await fetch(n8nWebhookUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(req.body)
        });
        
        res.json({ status: 'success', message: 'Webhook processed' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.status(500).json({ error: error.message });
    }
});

module.exports = app;

