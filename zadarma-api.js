// zadarma-api.js
const { api } = require('zadarma');

class ZadarmaAPI {
    constructor(key, secret, sandbox = false) {
        this.key = key;
        this.secret = secret;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è zadarma
        process.env.ZADARMA_USER_KEY = key;
        process.env.ZADARMA_SECRET_KEY = secret;
        
        console.log('üîß ZadarmaAPI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:');
        console.log('   Key —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!key, `(${key ? key.length : 0} —Å–∏–º–≤–æ–ª–æ–≤)`);
        console.log('   Secret —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!secret, `(${secret ? secret.length : 0} —Å–∏–º–≤–æ–ª–æ–≤)`);
        console.log('   Sandbox —Ä–µ–∂–∏–º:', sandbox);
    }

    async getBalance() {
        try {
            console.log('üìä –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ NPM –º–æ–¥—É–ª—å...');
            
            const result = await api({
                api_method: '/v1/info/balance/'
            });
            
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞:', result);
            
            return {
                status: 200,
                data: result
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ' + error.message);
        }
    }

    async requestCallback(from, to, predicted = false) {
        try {
            console.log(`üìû –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞: ${from} -> ${to}`);
            
            const params = {
                from: from,
                to: to
            };
            
            if (predicted) {
                params.predicted = 'predicted';
            }
            
            const result = await api({
                api_method: '/v1/request/callback/',
                params: params
            });
            
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞:', result);
            
            return {
                status: 200,
                data: result
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞:', error);
            throw new Error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞: ' + error.message);
        }
    }

    async getNumbers() {
        try {
            console.log('üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø—Ä—è–º—ã—Ö –Ω–æ–º–µ—Ä–æ–≤...');
            
            const result = await api({
                api_method: '/v1/direct_numbers/'
            });
            
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–æ–≤:', result);
            
            return {
                status: 200,
                data: result
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤:', error);
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤: ' + error.message);
        }
    }

    async sendSMS(number, message, caller_id = null) {
        try {
            console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ ${number}: ${message.substring(0, 50)}...`);
            
            const params = {
                number: number,
                message: message
            };
            
            if (caller_id) {
                params.caller_id = caller_id;
            }
            
            const result = await api({
                http_method: 'POST',
                api_method: '/v1/sms/send/',
                params: params
            });
            
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', result);
            
            return {
                status: 200,
                data: result
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error);
            throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: ' + error.message);
        }
    }

    async getTariffs() {
        try {
            console.log('üí∞ –ó–∞–ø—Ä–æ—Å —Ç–∞—Ä–∏—Ñ–æ–≤...');
            
            const result = await api({
                api_method: '/v1/tariff/'
            });
            
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ç–∞—Ä–∏—Ñ–æ–≤:', result);
            
            return {
                status: 200,
                data: result
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤:', error);
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤: ' + error.message);
        }
    }

    async getSipNumbers() {
        try {
            console.log('üìû –ó–∞–ø—Ä–æ—Å SIP –Ω–æ–º–µ—Ä–æ–≤...');
            
            const result = await api({
                api_method: '/v1/sip/'
            });
            
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ SIP:', result);
            
            return {
                status: 200,
                data: result
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SIP –Ω–æ–º–µ—Ä–æ–≤:', error);
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SIP –Ω–æ–º–µ—Ä–æ–≤: ' + error.message);
        }
    }
}

module.exports = ZadarmaAPI;
